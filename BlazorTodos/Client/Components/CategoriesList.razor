@using BlazorTodos.Shared
@using BlazorTodos.Server.Data
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject IMatDialogService MatDialogService
@inject IMatToaster Toaster
@inject IAnimationUtil AnimationUtil

<div>
    <p>

        <MatTextField @bind-Value="@Filter"
                      Dense="true"
                      Label="Filter Categories"
                      Icon="search"
                      Outlined="true"
                      OnKeyUp="@OnEnterKeyPressed"
                      OnFocusOut="@FilterList">
        </MatTextField>

    </p>
</div>



<Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0.3)">

    @if (Categories != null)
    {

        <table class="table">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Active?</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories)
                {
                    <tr id="@category.Id">
                        <td>@category.Description</td>
                        <td>
                            @(category.Active == true ? "Yes" : "No")
                        </td>
                        <td>
                            <a href="javascript: void(0);" @onclick="(()=> deleteCategory(category.Id))"><i class="far fa-trash-alt"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div>There are no categories to show.</div>
    }

</Animate>

@code {

    [Parameter]
    public TodoCategoryViewModel[] Categories { get; set; }

    [Parameter]
    public EventCallback<string> OnListChanged { get; set; }

    async Task deleteCategory(int id)
    {
        if (id > 0)
        {
            //bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            var confirmed = await MatDialogService.ConfirmAsync("Are you sure you want to delete the record?");
            if (confirmed)
            {

                try
                {
                    await Http.DeleteAsync("/api/todocategories/" + id);
                    Toaster.Add("Record deleted successfully.", MatToastType.Info);
                    // Apply Javascript interop animation by running Javascript function to add a class dynamically
                    //await JsRuntime.InvokeVoidAsync("deleteAnimation", id.ToString());
                    await AnimationUtil.HangAndDropLeft(id.ToString());

                    await OnListChanged.InvokeAsync("Category is deleted.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    Toaster.Add("There was error while saving the record. The error has been logged. Please try again.", MatToastType.Danger);
                }
            }
        }
    }

    private string Filter { get; set; }

    [Parameter]
    public EventCallback<string> OnFilterChanged { get; set; }


    async Task FilterList()
    {
        if (Filter == null) return;
        await OnFilterChanged.InvokeAsync(Filter);
    }

    async Task OnEnterKeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await FilterList();
        }
    }

}

