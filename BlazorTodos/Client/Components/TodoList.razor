@using BlazorTodos.Shared
@using BlazorTodos.Server.Data
@using BlazorTodos.Client.Components
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject IMatDialogService MatDialogService
@inject IMatToaster Toaster


<Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0.3)">

    @if (Todos != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Done?</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var todo in Todos)
                {
                <tr id="@todo.Id">
                    <td><OverstrikeText Overstrike=@todo.Complete Text="@todo.Description"></OverstrikeText></td>
                    <td>@todo?.Category</td>
                    <td>
                        <BooleanToYesNo Condition="@todo.Complete" />
                    </td>
                    <td>
                        <a href="javascript: void(0);" @onclick="(() => deleteTodo(todo.Id))"><i class="far fa-trash-alt"></i></a> |
                        <a href="javascript: void(0);" @onclick="(() => flipComplete(todo.Id))"><i class="fas fa-check"></i></a>
                    </td>
                </tr>

                }


            </tbody>
        </table>

    }
    else
    {
        <div>No Todoes to show!</div>
    }

</Animate>

@code {

    [Parameter]
    public TodoViewModel[] Todos { get; set; }

    [Parameter]
    public EventCallback<string> OnListChanged { get; set; }

    async Task deleteTodo(int id)
    {
        if (id > 0)
        {
            //bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            var confirmed = await MatDialogService.ConfirmAsync("Are you sure you want to delete the record?");
            if (confirmed)
            {
                try
                {
                    await Http.DeleteAsync("/api/todoes/" + id);
                    Toaster.Add("Record deleted successfully.", MatToastType.Info);
                    // Apply Javascript interop animation by running Javascript function to add a class dynamically
                    await JsRuntime.InvokeVoidAsync("deleteAnimation", id.ToString());

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    Toaster.Add("There was error while saving the record. The error has been logged. Please try again.", MatToastType.Danger);
                }
                await OnListChanged.InvokeAsync("Todo is deleted.");
            }
        }

    }

    async Task flipComplete(int id)
    {
        if (id > 0)
        {

            HttpContent httpContent = new StringContent(id.ToString());

            try
            {
                await Http.PutAsync("/api/todoes/" + id, httpContent);
                Toaster.Add("Record updated successfully.", MatToastType.Info);
                // Apply Javascript interop animation by running Javascript function to add a class dynamically
                await JsRuntime.InvokeVoidAsync("todoCompletedAnimation", id.ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Toaster.Add("There was error while saving the record. The error has been logged. Please try again.", MatToastType.Danger);
            }

            await OnListChanged.InvokeAsync("Todo complete state is changed.");
        }

    }

}
