@page "/todos_add"

@using BlazorTodos.Server.Data
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject IMatToaster Toaster

<h3>Add Todo</h3>

<EditForm Model="@todoViewModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <MatTextField Required="true"
                      @bind-Value="@todoViewModel.Description"
                      HelperTextPersistent="true"
                      HelperTextValidation="true"
                      HelperText="Todo Description minimum 5 characters and maximum 100 characters."
                      Label="Todo Description"
                      @oninput="@(e =>  @todoViewModel.Description = e.Value.ToString())"
                      maxlength="@MAX_TODO_LENGTH"
                      FullWidth="true">
        </MatTextField>
    </p>

    <p>
        <BlazorTodos.Client.Components.InputMaxLenghtNotifier Text="@todoViewModel.Description" MaxLenght="@MAX_TODO_LENGTH" />
    </p>

    <div>
        <MatCheckbox @bind-Value="@todoViewModel.Complete" Label="Is Completed?"></MatCheckbox>
    </div>

    <div>
        <MatSelect Label="Select a category"
                   FullWidth="true"
                   @bind-Value="@todoViewModel.TodoCategoryId"
                   Required="true">

            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <MatOption TValue="int" Value=@category.Id>@category.Description</MatOption>
                }
            }
        </MatSelect>
    </div>

    <br />
    <br />

    <MatButton type="submit" Raised="true" Icon="save">Save</MatButton>
    <MatButton type="button" Raised="true" Icon="cancel" @onclick="@(()=> @Cancel())">Cancel</MatButton>

</EditForm>

@code {
    private TodoViewModel todoViewModel = new TodoViewModel();
    private string InputMaxLenghtMessage { get; set; } = "";
    private int MAX_TODO_LENGTH { get; set; } = 100;

    private async Task HandleValidSubmit()
    {
        Console.WriteLine(todoViewModel);
        using var response = await Http.PostAsJsonAsync("/api/todoes", todoViewModel);
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");
            Toaster.Add("There was error while saving the record. The error has been logged. Please try again.", MatToastType.Danger);
            return;
        }
        else
        {
            Toaster.Add("Record is added successfully.", MatToastType.Info);
            UriHelper.NavigateTo("/todoes");
        }
    }

    private void Cancel()
    {
        UriHelper.NavigateTo("/");
    }

    private List<TodoCategoryViewModel> categories = new List<TodoCategoryViewModel>();

    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<List<TodoCategoryViewModel>>("/api/todocategories");
    }

}